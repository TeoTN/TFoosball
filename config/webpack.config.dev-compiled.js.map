{"version":3,"sources":["webpack.config.dev.js"],"names":[],"mappings":";;AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,eAAe,QAAQ,cAAR,CAAnB;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,oBAAoB,QAAQ,qBAAR,CAAxB;AACA,IAAI,2BAA2B,QAAQ,qCAAR,CAA/B;AACA,IAAI,QAAQ,QAAQ,SAAR,CAAZ;;AAEA,OAAO,OAAP,GAAiB;AACf,WAAS,MADM;AAEf,SAAO,CACL,QAAQ,OAAR,CAAgB,2BAAhB,IAA+C,IAD1C,EAEL,QAAQ,OAAR,CAAgB,wBAAhB,CAFK,EAGL,QAAQ,OAAR,CAAgB,aAAhB,CAHK,EAIL,KAAK,IAAL,CAAU,MAAM,MAAhB,EAAwB,OAAxB,CAJK,CAFQ;AAQf,UAAQ;;AAEN,UAAM,MAAM,QAFN;AAGN,cAAU,IAHJ;AAIN,cAAU,qBAJJ;AAKN,gBAAY;AALN,GARO;AAef,WAAS;AACP,gBAAY,CAAC,EAAD,EAAK,KAAL,EAAY,MAAZ,EAAoB,OAApB,CADL;AAEP,WAAO;;;;;;;;;AASL,mCAA6B,QAAQ,OAAR,CAAgB,2BAAhB;AATxB;AAFA,GAfM;AA6Bf,iBAAe;AACb,UAAM,MAAM,cADC;AAEb,qBAAiB,CAAC,UAAD;AAFJ,GA7BA;AAiCf,UAAQ;AACN,gBAAY,CACV;AACE,YAAM,OADR;AAEE,cAAQ,QAFV;AAGE,eAAS,MAAM;AAHjB,KADU,CADN;AAQN,aAAS,CACP;AACE,YAAM,OADR;AAEE,eAAS,MAAM,MAFjB;AAGE,cAAQ,OAHV;AAIE,aAAO,QAAQ,aAAR;AAJT,KADO,EAOP;AACE,YAAM,QADR;AAEE,eAAS,CAAC,MAAM,MAAP,EAAe,MAAM,cAArB,CAFX;AAGE,cAAQ;AAHV,KAPO,EAYP;AACE,YAAM,SADR;AAEE,eAAS,CAAC,MAAM,MAAP,EAAe,MAAM,cAArB,CAFX;AAGE,cAAQ;AAHV,KAZO,EAiBP;AACE,YAAM,gDADR;AAEE,eAAS,CAAC,MAAM,MAAP,EAAe,MAAM,cAArB,CAFX;AAGE,cAAQ,MAHV;AAIE,aAAO;AACL,cAAM;AADD;AAJT,KAjBO,EAyBP;AACE,YAAM,sBADR;AAEE,eAAS,CAAC,MAAM,MAAP,EAAe,MAAM,cAArB,CAFX;AAGE,cAAQ,KAHV;AAIE,aAAO;AACL,eAAO,KADF;AAEL,cAAM;AAFD;AAJT,KAzBO;AARH,GAjCO;AA6Ef,UAAQ;AACN,gBAAY,KAAK,IAAL,CAAU,SAAV,EAAqB,WAArB,CADN;AAEN,iBAAa;AAFP,GA7EO;AAiFf,WAAS,mBAAW;AAClB,WAAO,CAAC,YAAD,CAAP;AACD,GAnFc;AAoFf,WAAS,CACP,IAAI,iBAAJ,CAAsB;AACpB,YAAQ,IADY;AAEpB,cAAU,MAAM,OAFI;AAGpB,aAAS,MAAM;AAHK,GAAtB,CADO,EAMP,IAAI,QAAQ,YAAZ,CAAyB,EAAE,wBAAwB,eAA1B,EAAzB,CANO;;AAQP,MAAI,QAAQ,0BAAZ,EARO,EASP,IAAI,wBAAJ,EATO;AApFM,CAAjB","file":"webpack.config.dev-compiled.js","sourcesContent":["var path = require('path');\nvar autoprefixer = require('autoprefixer');\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');\nvar paths = require('./paths');\n\nmodule.exports = {\n  devtool: 'eval',\n  entry: [\n    require.resolve('webpack-dev-server/client') + '?/',\n    require.resolve('webpack/hot/dev-server'),\n    require.resolve('./polyfills'),\n    path.join(paths.appSrc, 'index')\n  ],\n  output: {\n    // Next line is not used in dev but WebpackDevServer crashes without it:\n    path: paths.appBuild,\n    pathinfo: true,\n    filename: 'static/js/bundle.js',\n    publicPath: '/'\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.json'],\n    alias: {\n      // This `alias` section can be safely removed after ejection.\n      // We do this because `babel-runtime` may be inside `react-scripts`,\n      // so when `babel-plugin-transform-runtime` imports it, it will not be\n      // available to the app directly. This is a temporary solution that lets\n      // us ship support for generators. However it is far from ideal, and\n      // if we don't have a good solution, we should just make `babel-runtime`\n      // a dependency in generated projects.\n      // See https://github.com/facebookincubator/create-react-app/issues/255\n      'babel-runtime/regenerator': require.resolve('babel-runtime/regenerator')\n    }\n  },\n  resolveLoader: {\n    root: paths.ownNodeModules,\n    moduleTemplates: ['*-loader']\n  },\n  module: {\n    preLoaders: [\n      {\n        test: /\\.js$/,\n        loader: 'eslint',\n        include: paths.appSrc,\n      }\n    ],\n    loaders: [\n      {\n        test: /\\.js$/,\n        include: paths.appSrc,\n        loader: 'babel',\n        query: require('./babel.dev')\n      },\n      {\n        test: /\\.css$/,\n        include: [paths.appSrc, paths.appNodeModules],\n        loader: 'style!css!postcss'\n      },\n      {\n        test: /\\.json$/,\n        include: [paths.appSrc, paths.appNodeModules],\n        loader: 'json'\n      },\n      {\n        test: /\\.(jpg|png|gif|eot|svg|ttf|woff|woff2)(\\?.*)?$/,\n        include: [paths.appSrc, paths.appNodeModules],\n        loader: 'file',\n        query: {\n          name: 'static/media/[name].[ext]'\n        }\n      },\n      {\n        test: /\\.(mp4|webm)(\\?.*)?$/,\n        include: [paths.appSrc, paths.appNodeModules],\n        loader: 'url',\n        query: {\n          limit: 10000,\n          name: 'static/media/[name].[ext]'\n        }\n      }\n    ]\n  },\n  eslint: {\n    configFile: path.join(__dirname, 'eslint.js'),\n    useEslintrc: false\n  },\n  postcss: function() {\n    return [autoprefixer];\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      inject: true,\n      template: paths.appHtml,\n      favicon: paths.appFavicon,\n    }),\n    new webpack.DefinePlugin({ 'process.env.NODE_ENV': '\"development\"' }),\n    // Note: only CSS is currently hot reloaded\n    new webpack.HotModuleReplacementPlugin(),\n    new CaseSensitivePathsPlugin()\n  ]\n};\n"]}