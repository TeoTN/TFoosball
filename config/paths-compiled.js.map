{"version":3,"sources":["paths.js"],"names":[],"mappings":";;;;;AAGA,IAAI,OAAO,QAAQ,MAAR,CAAX;;;AAGA,IAAI,YACF,KAAK,OAAL,CAAa,KAAK,IAAL,CAAU,SAAV,EAAqB,IAArB,CAAb,MACA,KAAK,OAAL,CAAa,QAAQ,GAAR,EAAb,CAFF;;;AAMA,IAAI,2BACF,QAAQ,IAAR,CAAa,IAAb,CAAkB;AAAA,SAAO,IAAI,OAAJ,CAAY,kBAAZ,IAAkC,CAAC,CAA1C;AAAA,CAAlB,CADF;;AAIA,SAAS,UAAT,CAAoB,YAApB,EAAkC;AAChC,SAAO,KAAK,OAAL,CAAa,SAAb,EAAwB,YAAxB,CAAP;AACD;;AAED,SAAS,UAAT,CAAoB,YAApB,EAAkC;AAChC,SAAO,KAAK,OAAL,CAAa,YAAb,CAAP;AACD;;AAED,IAAI,wBAAJ,EAA8B;;AAE5B,SAAO,OAAP,GAAiB;AACf,cAAU,WAAW,UAAX,CADK;AAEf,aAAS,WAAW,wBAAX,CAFM;AAGf,gBAAY,WAAW,yBAAX,CAHG;AAIf,oBAAgB,WAAW,iBAAX,CAJD;AAKf,YAAQ,WAAW,iBAAX,CALO;AAMf,oBAAgB,WAAW,iBAAX,CAND;AAOf,oBAAgB,WAAW,iBAAX;AAPD,GAAjB;AASD,CAXD,MAWO,IAAI,CAAC,SAAL,EAAgB;;AAErB,SAAO,OAAP,GAAiB;AACf,cAAU,WAAW,OAAX,CADK;AAEf,aAAS,WAAW,YAAX,CAFM;AAGf,gBAAY,WAAW,aAAX,CAHG;AAIf,oBAAgB,WAAW,cAAX,CAJD;AAKf,YAAQ,WAAW,KAAX,CALO;AAMf,oBAAgB,WAAW,cAAX,CAND;;AAQf,oBAAgB,WAAW,iBAAX;AARD,GAAjB;AAUD,CAZM,MAYA;;AAEL,SAAO,OAAP,GAAiB;AACf,cAAU,WAAW,OAAX,CADK;AAEf,aAAS,WAAW,YAAX,CAFM;AAGf,gBAAY,WAAW,aAAX,CAHG;AAIf,oBAAgB,WAAW,cAAX,CAJD;AAKf,YAAQ,WAAW,KAAX,CALO;AAMf,oBAAgB,WAAW,cAAX,CAND;AAOf,oBAAgB,WAAW,cAAX;AAPD,GAAjB;AASD","file":"paths-compiled.js","sourcesContent":["// TODO: we can split this file into several files (pre-eject, post-eject, test)\n// and use those instead. This way we don't need to branch here.\n\nvar path = require('path');\n\n// True after ejecting, false when used as a dependency\nvar isEjected = (\n  path.resolve(path.join(__dirname, '..')) ===\n  path.resolve(process.cwd())\n);\n\n// Are we developing create-react-app locally?\nvar isInCreateReactAppSource = (\n  process.argv.some(arg => arg.indexOf('--debug-template') > -1)\n);\n\nfunction resolveOwn(relativePath) {\n  return path.resolve(__dirname, relativePath);\n}\n\nfunction resolveApp(relativePath) {\n  return path.resolve(relativePath);\n}\n\nif (isInCreateReactAppSource) {\n  // create-react-app development: we're in ./config/\n  module.exports = {\n    appBuild: resolveOwn('../build'),\n    appHtml: resolveOwn('../template/index.html'),\n    appFavicon: resolveOwn('../template/favicon.ico'),\n    appPackageJson: resolveOwn('../package.json'),\n    appSrc: resolveOwn('../template/src'),\n    appNodeModules: resolveOwn('../node_modules'),\n    ownNodeModules: resolveOwn('../node_modules')\n  };\n} else if (!isEjected) {\n  // before eject: we're in ./node_modules/react-scripts/config/\n  module.exports = {\n    appBuild: resolveApp('build'),\n    appHtml: resolveApp('index.html'),\n    appFavicon: resolveApp('favicon.ico'),\n    appPackageJson: resolveApp('package.json'),\n    appSrc: resolveApp('src'),\n    appNodeModules: resolveApp('node_modules'),\n    // this is empty with npm3 but node resolution searches higher anyway:\n    ownNodeModules: resolveOwn('../node_modules')\n  };\n} else {\n  // after eject: we're in ./config/\n  module.exports = {\n    appBuild: resolveApp('build'),\n    appHtml: resolveApp('index.html'),\n    appFavicon: resolveApp('favicon.ico'),\n    appPackageJson: resolveApp('package.json'),\n    appSrc: resolveApp('src'),\n    appNodeModules: resolveApp('node_modules'),\n    ownNodeModules: resolveApp('node_modules')\n  };\n}\n"]}